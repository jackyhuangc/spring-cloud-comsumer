spring.application.name=my-client
#指定属性文件名 com-dataSource.properties,是有命名规则的
#指定配置中心
#spring.cloud.config.uri:http://localhost:8888

#指定属性文件名 com-dataSource.properties,是有命名规则的
#spring.application.name=my
spring.cloud.config.name=my
spring.cloud.config.profile=test
spring.cloud.config.label=master
spring.cloud.config.uri= http://localhost:8760
server.port=8763

#可以用zuul进行路由映射，无论是本地还是外部地址
#注意此处服务名要与注册的服务名一致，如spring-reserevation-service一定是在zureka中注册的，能找到的
#动态路由: 以动态方式根据需要将请求路由至不同后端集群处

#zuul.routes.spring-reserevation-service.path=/test/**
#zuul.routes.spring-reserevation-service.strPrefix=true
#zuul.routes.spring-reserevation-service.url=http://localhost:8762/hello

# 跳转到指定的服务器接口上 访问如：http://localhost:8763/test1?accessToken=xx

zuul.routes.a-1.path=/test1/**
zuul.routes.a-1.prefix=/api1
zuul.routes.a-1.stripPrefix=true
zuul.routes.a-1.url=http://localhost:8762/hello

# 结合eureka的服务注册功能，实现负载均衡 访问如：http://localhost:8763/test2/hello?accessToken=xx
zuul.routes.a-2.path=/test2/**
zuul.routes.a-2.prefix=/api2
# false时，不会去除/api2前缀，也就导致不能正常访问spring-reserevation-service服务
zuul.routes.a-2.stripPrefix=false 
zuul.routes.a-2.serviceId=spring-reserevation-service

zuul.routes.rest.path=/
zuul.routes.rest.url=http://localhost:8762/hello

spring.cloud.stream.kafka.binder.brokers=127.0.0.1:9092
spring.cloud.stream.kafka.binder.zk-nodes=127.0.0.1:2181
spring.cloud.stream.kafka.binder.minPartitionCount=1
spring.cloud.stream.kafka.binder.autoCreateTopics=true
spring.cloud.stream.kafka.binder.autoAddPartitions=true


spring.cloud.stream.bindings.testa.destination=test_spring_stream
spring.cloud.stream.bindings.testa.group=group-1
spring.cloud.stream.bindings.testa.consumer.concurrency=1
spring.cloud.stream.bindings.testa.consumer.partitioned=false
